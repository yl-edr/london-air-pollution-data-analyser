#BlueJ class context
comment0.target=MapImage
comment0.text=\r\n\ A\ class\ to\ store\ an\ image\ of\ the\ map\ and\ methods\ to\ overlay\ coloured\ data\ blocks\ on\ it.\r\n\r\n\ @author\ Anton\ Davidouski\r\n\ @version\ 1.0\r\n
comment1.params=city\ fileName
comment1.target=MapImage(java.lang.String,\ java.lang.String)
comment2.params=
comment2.target=javafx.scene.image.Image\ getImage()
comment2.text=\r\n\ Returns\ the\ base\ image,\ no\ coloured\ overlay.\r\n\r\n\ @return\ the\ Image\ representing\ the\ base\ map\ image\r\n
comment3.params=dataPoint\ min\ max\ ratio
comment3.target=void\ processDataPoint(DataPoint,\ double,\ double,\ int)
comment3.text=\r\n\ Takes\ a\ single\ data\ point,\ figures\ out\ where\ it\ should\ be\ placed\ on\ the\ map,\r\n\ figures\ out\ what\ colour\ it\ should\ be,\ and\ places\ a\ block\ of\ that\ colour\ on\ the\ overlay\ image.\r\n\r\n\ @param\ dataPoint\ The\ data\ point\ to\ be\ placed\ on\ the\ map\r\n\ @param\ min\ The\ minimum\ value\ of\ the\ data\ set\r\n\ @param\ max\ The\ maximum\ value\ of\ the\ data\ set\r\n\ @param\ ratio\ The\ ratio\ to\ scale\ the\ size\ of\ the\ block\ by,\ since\ different\ maps\ have\ different\ sizes\r\n
comment4.params=startX\ startY\ width\ height\ dataPercentage
comment4.target=void\ placeOverlayBlock(int,\ int,\ int,\ int,\ double)
comment4.text=\r\n\ Place\ a\ colour\ block\ on\ the\ overlay\ colour\ image\ at\ full\ opacity.\r\n\r\n\ @param\ startX\ The\ x-coordinate\ of\ the\ top-left\ corner\ of\ the\ block\r\n\ @param\ startY\ The\ y-coordinate\ of\ the\ top-left\ corner\ of\ the\ block\r\n\ @param\ width\ The\ width\ of\ the\ block\r\n\ @param\ height\ The\ height\ of\ the\ block\r\n\ @param\ dataPercentage\ The\ data\ points\ location\ in\ the\ colour\ spectrum\ as\ a\ percentage\ relative\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ min\ and\ max\ values.\ Used\ tio\ determine\ the\ colour\ of\ the\ block.\r\n
comment5.params=
comment5.target=javafx.scene.image.Image\ getCombined()
comment5.text=\r\n\ Overlay\ the\ colour\ image\ on\ top\ of\ the\ base\ image,\ using\ a\ blend\ ratio\r\n\r\n\ @return\ The\ combined\ image\ which\ can\ be\ added\ to\ the\ IMageView\r\n
comment6.params=radius
comment6.target=void\ applyBlur(int)
comment6.text=\r\n\ Apply\ the\ two\ blur\ functions\ to\ the\ image.\r\n\ @param\ radius\ radius\ of\ the\ blur\r\n
comment7.params=radius
comment7.target=javafx.scene.image.WritableImage\ applyHorizontalBlur(int)
comment7.text=\r\n\ Apply\ block\ blur\ in\ the\ horizontal\ direction.\r\n\r\n\ @param\ radius\ radius\ of\ the\ blur\r\n\ @return\ the\ image\ with\ the\ horizontal\ blur\ applied\r\n
comment8.params=source\ radius
comment8.target=javafx.scene.image.WritableImage\ applyVerticalBlur(javafx.scene.image.WritableImage,\ int)
comment8.text=\r\n\ Apply\ block\ blur\ in\ the\ vertical\ direction.\ Logic\ for\ horizontal\ and\ vertical\ is\ the\ same,\ see\ comments\ in\ horizontal\r\n\r\n\ @param\ radius\ radius\ of\ the\ blur\r\n\ @return\ the\ image\ with\ the\ vertical\ blur\ applied\r\n
comment9.params=
comment9.target=void\ resetOverlay()
comment9.text=\r\n\ Reset\ the\ overlay\ image\ to\ be\ fully\ transparent.\r\n
numComments=10
